* General Comments
** Defense
A good starting defense is to make the symbolic execution engine less scalable by patching the binary (in essence jamming) since a lot of the favored teams will be using this technique. For just one example of what I am talking about, you can take inverses of optimizations presented by Jonas in http://infoscience.epfl.ch/record/186012/files/overify.pdf by creating (UN)VERIFY: Rewriting Binaries for Slow Veriﬁcation.

"Law of static analysis: cannot check code you do not see." ~ http://research.microsoft.com/en-us/events/vsworkshop2009/dawson_engler-2.pdf

More classic forms of defense are those that protect from the control flow hijacking in general such as control flow integrity enforcement mechanisms by patching the binary with a system of trampolines. See http://www.cs.sunysb.edu/~mizhang/papers/binCFI.pdf (https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/sec13/zhang.mp4) and http://recon.cx/2013/slides/Recon2013-Elias%20Bachaalany-Inside%20EMET%204.pdf (http://recon.cx/2013/video/Recon2013-Elias%20Bachaalany-%20Inside%20EMET%204.0.mp4)

Many teams will be enamored with OCaml and C++ so it might might be worth considering exploiting the tool doing the exploiting since the tool is really just a complicated execution environment that is probably itself very insecure and will assume that the binary is “safe.” This is a very speculative defense so probably the last thing to consider. This type of defense is reminiscent of the many zerodays found in Wireshark and then used during CTFs.

** Attack
Much of this competition will be a special case of a field known as program synthesis. Local buffer overflows are the easiest to get working since the SMT will do most of program extraction (Exploit Generation) for you once you see the buffer-overflow exploit from the verification perspective.
(Need to upload writings on local and non-local exploits (think chained vs not chained) in the context of binaries.) Let's see how this is done in practice with the following examples (Figure out LaTeX situation): 

** Delivery and Exploit Transformations
*** ROP
    See https://github.com/turnersr/turnersr.github.io/blob/master/technology_review/Technology_Survey.md#return-oriented-programming-really-this-should-be-under-abstract-interpretation-p
*** JOP
    Attacking x86 Windows Binaries by Jump Oriented Programming - http://www.uni-obuda.hu/users/szakala/INES%202013%20pendrive/61_ines2013.pdf
*** Return-to-libc

*** SigReturn oriented programming
